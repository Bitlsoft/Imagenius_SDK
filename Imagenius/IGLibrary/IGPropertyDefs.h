#pragma once
#include "IGSmartPixel.h"

#define BEGIN_IGTYPE_MAP()	typedef enum {ENUM_IGTYPE_UNKNOWN,
#define DECLARE_IGTYPE(type) ENUM_IGTYPE_##type,
#define END_IGTYPE_MAP() } ENUM_IGTYPE;

namespace IGLibrary
{
	typedef enum {
		IGFRAMEPROPERTY_UNIT_CM	= 0,
		IGFRAMEPROPERTY_UNIT_PIXEL = 1,
		IGFRAMEPROPERTY_UNIT_INCH = 2} IGFRAMEPROPERTY_UNIT_ENUM;

	typedef enum {
		IGFRAMEPROPERTY_STRETCHING_NO	= 0,
		IGFRAMEPROPERTY_STRETCHING_FAST	= 1,
		IGFRAMEPROPERTY_STRETCHING_BICUBIC = 2} IGFRAMEPROPERTY_STRETCHING_ENUM;

	typedef enum {
			IGBRUSH_TYPE_ENUM_COLOR_NULL = 0,
			IGBRUSH_TYPE_ENUM_COLOR_SOLID = 1,
			IGBRUSH_TYPE_ENUM_COLOR_TEXTURED = 2,
			IGBRUSH_TYPE_ENUM_SHAPE_ROUND = 4,
			IGBRUSH_TYPE_ENUM_SHAPE_ROUND_SOLID = IGBRUSH_TYPE_ENUM_SHAPE_ROUND | IGBRUSH_TYPE_ENUM_COLOR_SOLID,
			IGBRUSH_TYPE_ENUM_SHAPE_ROUND_TEXTURED = IGBRUSH_TYPE_ENUM_SHAPE_ROUND | IGBRUSH_TYPE_ENUM_COLOR_TEXTURED,
			IGBRUSH_TYPE_ENUM_SHAPE_SQUARE = 8,
			IGBRUSH_TYPE_ENUM_SHAPE_SQUARE_SOLID = IGBRUSH_TYPE_ENUM_SHAPE_SQUARE | IGBRUSH_TYPE_ENUM_COLOR_SOLID,
			IGBRUSH_TYPE_ENUM_SHAPE_SQUARE_TEXTURED = IGBRUSH_TYPE_ENUM_SHAPE_SQUARE | IGBRUSH_TYPE_ENUM_COLOR_TEXTURED,
			IGBRUSH_TYPE_ENUM_SHAPE_CUSTOM = 16,
			IGBRUSH_TYPE_ENUM_SHAPE_CUSTOM_SOLID = IGBRUSH_TYPE_ENUM_SHAPE_CUSTOM | IGBRUSH_TYPE_ENUM_COLOR_SOLID,
			IGBRUSH_TYPE_ENUM_SHAPE_CUSTOM_TEXTURED = IGBRUSH_TYPE_ENUM_SHAPE_CUSTOM | IGBRUSH_TYPE_ENUM_COLOR_TEXTURED,
			IGBRUSH_TYPE_ENUM_ANTIALIASED = 32,
			IGBRUSH_TYPE_ENUM_SHAPE_ROUND_AA = IGBRUSH_TYPE_ENUM_ANTIALIASED | IGBRUSH_TYPE_ENUM_SHAPE_ROUND,
			IGBRUSH_TYPE_ENUM_SHAPE_ROUND_AA_SOLID = IGBRUSH_TYPE_ENUM_ANTIALIASED | IGBRUSH_TYPE_ENUM_SHAPE_ROUND_SOLID,
			IGBRUSH_TYPE_ENUM_SHAPE_ROUND_AA_TEXTURED = IGBRUSH_TYPE_ENUM_ANTIALIASED | IGBRUSH_TYPE_ENUM_SHAPE_ROUND_TEXTURED,
			IGBRUSH_TYPE_ENUM_SHAPE_SQUARE_AA = IGBRUSH_TYPE_ENUM_ANTIALIASED | IGBRUSH_TYPE_ENUM_SHAPE_SQUARE,
			IGBRUSH_TYPE_ENUM_SHAPE_SQUARE_AA_SOLID = IGBRUSH_TYPE_ENUM_ANTIALIASED | IGBRUSH_TYPE_ENUM_SHAPE_SQUARE_SOLID,
			IGBRUSH_TYPE_ENUM_SHAPE_SQUARE_AA_TEXTURED = IGBRUSH_TYPE_ENUM_ANTIALIASED | IGBRUSH_TYPE_ENUM_SHAPE_SQUARE_TEXTURED,
			IGBRUSH_TYPE_ENUM_SHAPE_CUSTOM_AA = IGBRUSH_TYPE_ENUM_ANTIALIASED | IGBRUSH_TYPE_ENUM_SHAPE_CUSTOM,
			IGBRUSH_TYPE_ENUM_SHAPE_CUSTOM_AA_SOLID = IGBRUSH_TYPE_ENUM_ANTIALIASED | IGBRUSH_TYPE_ENUM_SHAPE_CUSTOM_SOLID,
			IGBRUSH_TYPE_ENUM_SHAPE_CUSTOM_AA_TEXTURED = IGBRUSH_TYPE_ENUM_ANTIALIASED | IGBRUSH_TYPE_ENUM_SHAPE_CUSTOM_TEXTURED,
			IGBRUSH_TYPE_ENUM_DEFAULT = IGBRUSH_TYPE_ENUM_COLOR_SOLID | IGBRUSH_TYPE_ENUM_SHAPE_ROUND | IGBRUSH_TYPE_ENUM_ANTIALIASED
		} IGBRUSH_TYPE_ENUM;

	typedef enum {
		IGSELECTTEXTURE_TYPE_ENUM_TEXTURE1 = 0,
		IGSELECTTEXTURE_TYPE_ENUM_TEXTURE2 = 1,
		IGSELECTTEXTURE_TYPE_ENUM_UNKNOWN = 2} IGSELECTTEXTURE_TYPE_ENUM;

	BEGIN_IGTYPE_MAP()
		DECLARE_IGTYPE(int)
		DECLARE_IGTYPE(double)
		DECLARE_IGTYPE(wstring)
		DECLARE_IGTYPE(IGConvertible)
		DECLARE_IGTYPE(IGFRAMEPROPERTY_UNIT_ENUM)
		DECLARE_IGTYPE(IGFRAMEPROPERTY_STRETCHING_ENUM)
		DECLARE_IGTYPE(IGBRUSH_TYPE_ENUM)
		DECLARE_IGTYPE(IGSELECTTEXTURE_TYPE_ENUM)	
		DECLARE_IGTYPE(IGFRAMEPROPERTY_SHOWSEGMENTATION_ENUM)	
	END_IGTYPE_MAP()
}

#define BEGIN_CONVERSION_MAP()	private:
#define CONVERSION_SUPPORT(type) \
	static ENUM_IGTYPE getType (const type&) {return ENUM_IGTYPE_##type;}\
	inline void setType (const type&) const {m_ePropType = ENUM_IGTYPE_##type;}\
	inline bool isTypeEqual (const type&) const {return (m_ePropType == ENUM_IGTYPE_##type);}\
	inline bool isTypeConvertibleTo (const type&) const {return (m_ePropTypeHandover == ENUM_IGTYPE_##type);}
// secondary type support (optional)
#define CONVERSION_SUPPORT_WITH_HANDOVER(type, type_handover) \
	CONVERSION_SUPPORT(type)\
	inline void setTypeHandover (const type&, const type_handover&) const {m_ePropTypeHandover = ENUM_IGTYPE_##type_handover;}
#define END_CONVERSION_MAP()
#define BEGIN_RELEASE_MAP()	void release() {\
	if (*m_spData) {\
	switch (m_ePropType) {
#define RELEASE_SUPPORT(type) case ENUM_IGTYPE_##type:\
	delete (type*)*m_spData;\
	break;
#define END_RELEASE_MAP() }}}
#define BEGIN_TOSTRING_MAP() void IGToString::operator () (std::wstring& wsDest, unsigned int uiPtr, ENUM_IGTYPE ePropType) {\
	switch (ePropType) {
#define TOSTRING_SUPPORT(type) case ENUM_IGTYPE_##type:\
	wsDest = this->operator () (*(type*)uiPtr);\
	return;
#define END_TOSTRING_MAP() }wsDest = L"Unknown";}